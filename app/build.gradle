buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.jakewharton:butterknife:+'
    }
}

apply plugin: 'com.android.application'

repositories {
    maven {
        url 'https://github.com/felixb/ub0rlogg0r/raw/mvn-repo/'
    }
    maven {
        url 'https://github.com/Goddchen/mvn-repo/raw/master/'
    }
    mavenCentral()
}

ext {
    gitVersion = null
    archivesBaseName = 'no-cloud-share'
}

def getVersionName = { ->
    if (project.gitVersion == null) {
        def version = "0.0.0"
        try {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'describe', '--tags'
                standardOutput = stdout
            }
            version = stdout.toString().trim().replaceFirst('^[a-zA-Z]*-?', '')
        } catch (ignored) {
            // ignore
        }
        logger.info("version: ${version}")
        project.gitVersion = version
    } else {
        logger.debug("version already set: ${project.gitVersion}")
    }
    return project.gitVersion
}

def getVersionCode = { minSdk ->
    def version = getVersionName()
    def parts = version.split('[\\.]')
    def l = parts.size()
    def multi = 100000000
    def code = minSdk * multi

    for (int i = 0; i < l; i++) {
        multi /= 100
        code += parts[i].replaceFirst('-.*', '').toInteger() * multi
    }

    if (parts[l - 1].contains('-')) {
        code += parts[l - 1].split('-')[1].toInteger()
    }

    def versionCode = code.toInteger()
    logger.info("versionCode: ${versionCode}")
    return versionCode
}

android {
    compileSdkVersion 19
    buildToolsVersion "20"

    defaultConfig {
        applicationId "de.ub0r.android.nocloudshare"
        minSdkVersion 15
        targetSdkVersion 19
        versionName getVersionName()
        versionCode getVersionCode(minSdkVersion.mApiLevel)
    }

    signingConfigs {
        if (project.hasProperty('releaseKeystorePassword')) {
            release {
                storeFile file("release.ks")
                storePassword releaseKeystorePassword
                keyAlias "androidreleasekey"
                keyPassword releaseKeyPassword
            }
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "-debug"
        }

        logRelease {
            versionNameSuffix "-logRelease"
            signingConfig signingConfigs.release
            runProguard false
        }

        release {
            signingConfig signingConfigs.release
            proguardFile 'proguard.cfg'
            runProguard true
        }

        applicationVariants.all { variant ->
            if (!variant.name.contains('debug')) {
                def file = variant.outputFile
                variant.outputFile =
                        new File(file.parent,
                                file.name.replace('.apk', '-' + defaultConfig.versionName + '.apk'))
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.intellij:annotations:+@jar'
    compile 'de.ub0r.android.logg0r:logg0r:+'
    compile 'com.google.code.gson:gson:+'
    compile 'com.jakewharton:butterknife:+'
    compile 'com.jakewharton:disklrucache:+'
    compile 'com.android:volley:+'
}
