buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.jakewharton:butterknife:+'
        classpath('com.github.triplet.gradle:play-publisher:1.0.0') {
            exclude group: 'com.google.guava'
        }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'play'

play {
    uploadImages = true
    serviceAccountEmail =
            '925691948433-pl4bec638njeenipednmsmo0q55j6907@developer.gserviceaccount.com'
    pk12File = file('play_api_client.p12')
}

repositories {
    maven {
        url 'https://raw.githubusercontent.com/felixb/ub0rlogg0r/mvn-repo/'
    }
    maven {
        url 'https://raw.githubusercontent.com/Goddchen/mvn-repo/master/'
    }
    mavenCentral()
}

ext {
    gitVersion = null
    archivesBaseName = 'no-cloud-share'
}

def getVersionName = { ->
    if (project.gitVersion == null) {
        def version = "0.0.0"
        try {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'describe', '--tags'
                standardOutput = stdout
            }
            version = stdout.toString().trim().replaceFirst('^[a-zA-Z]*-?', '')
        } catch (ignored) {
            // ignore
        }
        logger.info("version: ${version}")
        project.gitVersion = version
    } else {
        logger.debug("version already set: ${project.gitVersion}")
    }
    return project.gitVersion
}

def getVersionCode = { minSdk ->
    def version = getVersionName()
    def parts = version.split('[\\.]')
    def l = parts.size()
    def multi = 100000000
    def code = minSdk * multi

    for (int i = 0; i < l; i++) {
        multi /= 100
        code += parts[i].replaceFirst('-.*', '').toInteger() * multi
    }

    if (parts[l - 1].contains('-')) {
        code += parts[l - 1].split('-')[1].toInteger()
    }

    def versionCode = code.toInteger()
    logger.info("versionCode: ${versionCode}")
    return versionCode
}

android {
    compileSdkVersion 21
    buildToolsVersion '21.1.2'

    defaultConfig {
        applicationId "de.ub0r.android.nocloudshare"
        minSdkVersion 15
        targetSdkVersion 21
        versionName getVersionName()
        versionCode getVersionCode(minSdkVersion.mApiLevel)
    }

    signingConfigs {
        if (project.hasProperty('releaseKeystorePassword')) {
            release {
                storeFile file("release.ks")
                storePassword releaseKeystorePassword
                keyAlias "androidreleasekey"
                keyPassword releaseKeyPassword
            }
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "-debug"
        }

        logRelease {
            versionNameSuffix "-logRelease"
            signingConfig signingConfigs.release
            minifyEnabled false
        }

        release {
            signingConfig signingConfigs.release
            proguardFile 'proguard.cfg'
            minifyEnabled true
        }

        applicationVariants.all { variant ->
            if (!variant.name.contains('debug')) {
                variant.outputs.each { output ->
                    def file = output.outputFile
                    output.outputFile = new File(file.parent,
                            file.name.replace('.apk', '-' + defaultConfig.versionName + '.apk'))
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //noinspection GradleDynamicVersion
    compile 'com.intellij:annotations:+@jar'
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.android.support:recyclerview-v7:21.0.3'
    compile 'de.ub0r.android.logg0r:logg0r:2.0.0'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.jakewharton:butterknife:6.0.0'
    compile 'com.jakewharton:disklrucache:2.0.2'
    compile 'com.actionbarsherlock:viewpagerindicator:2.4.1'
    compile 'com.mcxiaoke.volley:library:1.0.10'
}
